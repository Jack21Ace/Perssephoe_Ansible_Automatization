---
- name: Actualizar servidores Linux
  hosts: all
  become: yes
  gather_facts: yes
  tasks:
    - name: Configurar el intérprete de Python
      ansible.builtin.set_fact:
        ansible_python_interpreter: /usr/bin/python3    

    - name: Actualizar lista de paquetes en Debian/Ubuntu
      apt:
        update_cache: yes
        cache_valid_time: 86400
      when: ansible_facts['os_family'] == "Debian"

    - name: Actualizar lista de paquetes en Rocky Linux (RHEL)
      dnf:
        update_cache: yes
      when: ansible_facts['os_family'] == "RedHat"

    - name: Actualizar paquetes instalados en Debian/Ubuntu
      apt:
        upgrade: dist
      when: ansible_facts['os_family'] == "Debian"

    - name: Actualizar paquetes instalados en Rocky Linux (RHEL)
      dnf:
        name: "*"
        state: latest
      when: ansible_facts['os_family'] == "RedHat"

    - name: Eliminar paquetes no utilizados en Debian/Ubuntu
      apt:
        autoremove: yes
        autoclean: yes
      when: ansible_facts['os_family'] == "Debian"

    - name: Eliminar paquetes no utilizados en Rocky Linux (RHEL)
      ansible.builtin.command: dnf autoremove -y
      when: ansible_facts['os_family'] == "RedHat"

    # Obtener la versión del kernel en ejecución
    - name: Check running kernel version
      ansible.builtin.command: uname -r
      register: current_kernel
      when: ansible_facts['os_family'] == "RedHat"

    # Obtener la última versión del kernel instalado
    - name: Check latest installed kernel version
      ansible.builtin.command: rpm -q --last kernel | head -n 1 | awk '{print $1}' | sed 's/kernel-//'
      register: latest_installed_kernel
      when: ansible_facts['os_family'] == "RedHat"

    - name: Debug kernel versions
      ansible.builtin.debug:
        msg: "Running kernel: {{ current_kernel.stdout }}, Latest installed kernel: {{ latest_installed_kernel.stdout }}"
      when: ansible_facts['os_family'] == "RedHat"

    # Reiniciar solo si el kernel activo y el último kernel instalado no coinciden
    - name: Reboot the server if a new kernel is installed
      ansible.builtin.reboot:
        msg: "Rebooting to apply new kernel"
        reboot_timeout: 300
      when: 
        - ansible_facts['os_family'] == "RedHat"
        - current_kernel.stdout != latest_installed_kernel.stdout
